import javax.swing.JFrame;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Random;
import java.awt.Color;

public class Frame extends JFrame {
    private static int mouseClickX, mouseClickY; // Stores the position of the last mouse click

    private static Random random = new Random();

    // Frame constructor
	public Frame() {
		this.add(new Panel());
		this.setTitle("2D Minecraft");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(true);
		this.pack();
		this.setVisible(true);
		this.setLocationRelativeTo(null);
        this.setIcon("img/Grass Block.png");
		this.addMouseListener(new MouseListener() {
            /*
             * Triggers when the program detects a mouse click
             */
		    @Override
		    public void mouseClicked(MouseEvent e) {
		        mouseClickX = e.getX();
		        mouseClickY = e.getY();
                try {
                    if(Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX]).soft
                    && !(Tile.getTile(Terrain.overworld[Terrain.selectedBlockY+1][Terrain.selectedBlockX]).name.equals("air")
                    && Tile.getTile(Terrain.overworld[Terrain.selectedBlockY-1][Terrain.selectedBlockX]).name.equals("air")
                    && Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX+1]).name.equals("air")
                    && Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX-1]).name.equals("air"))) {
                        Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX] = Tile.getTileID(Inventory.selectedItem);
                        Terrain.updateBlocks();
                    } else {
                        if(Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX]).breakable) {
                            for(int i = 0; i < 15; i++) {
                                // Generate texture
                                // A texture is generated by taking a random sample from the block's texture
                                Color[][] blockTexture = GameGraphics.defaultTileAtlas.getTexture(Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX]).atlasImageLink.x, Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX]).atlasImageLink.y);
                                Color[][] particleTexture = new Color[4][4];
                                int xOffset = random.nextInt(Tile.DEFAULT_TILE_SIZE-4)+1;
                                int yOffset = random.nextInt(Tile.DEFAULT_TILE_SIZE-4)+1;
                                for(int a = 0; a < particleTexture.length; a++)
                                    for(int b = 0; b < particleTexture[0].length; b++)
                                        particleTexture[a][b] = blockTexture[a+xOffset][b+yOffset];
                                // Summon particle
                                new Particle(
                                    new Vector2.Float32(Terrain.selectedBlockX * Tile.DEFAULT_TILE_SIZE * GameSettings.tileRenderScale - Panel.playerX + (Tile.DEFAULT_TILE_SIZE * GameSettings.tileRenderScale)/2 + random.nextInt(30)-15,
                                    Terrain.selectedBlockY * Tile.DEFAULT_TILE_SIZE * GameSettings.tileRenderScale - Panel.playerY + (Tile.DEFAULT_TILE_SIZE * GameSettings.tileRenderScale)/2 + random.nextInt(30)-15),
                                    new Vector2.Float32(random.nextInt(10)-5,
                                    random.nextInt(10)-5),
                                    true,
                                    0.1f,
                                    1.05f,
                                    20,
                                    particleTexture,
                                    (short)GameSettings.tileRenderScale
                                );
                            }
                            if(Tile.getTile(Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX]).name.equals("thick_oak_leaves")) {
                                Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX] = Tile.getTileID("oak_wood");
                            } else {
                                Terrain.overworld[Terrain.selectedBlockY][Terrain.selectedBlockX] = Tile.getTileID("air");
                            }
                            Terrain.updateBlocks();
                        }
                    }
                } catch(IndexOutOfBoundsException e_){} // Ignores IndexOutOfBoundsException
		    }

            @Override
            public void mousePressed(MouseEvent e) {
                // TODO Auto-generated method stub
                
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                // TODO Auto-generated method stub
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void mouseExited(MouseEvent e) {
                // TODO Auto-generated method stub
                
            }
		});
	}

    // Gets mouse click position
    public static Vector2.Int32 getMouseClick() {
        return new Vector2.Int32(mouseClickX, mouseClickY);
    }

    // Needs to be called after getting mouse click position
    public static void resetMouseClick() {
        mouseClickX = -1;
        mouseClickY = -1;
    }

    // Attempts to set the icon of the frame to a predefined image
    public void setIcon(String path) {
        try {
            this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(path)));
        } catch(Exception e) {
            System.err.println("Failed to load window icon because an error occured.\nERROR: " + e);
        }
    }
}
